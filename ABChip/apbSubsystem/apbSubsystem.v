//All Rights Reserved.
//TEST 123
//
//*** This file is auto generated by IDesignSpec (http://www.agnisys.com) . Please do not edit this file. ***
// XML Revision      : $Revision: 1.238 $
//
//---------------------------------------------------------------------------------------------------------------
//
//  apbSubSystem hierarchy
//
//  apbSubSystem
//   |__ i_apbbus8
//   |__ i_apbmst
//   |__ i_irqctrl
//   |__ i_timers
//   |__ i_uart
//   |__ i_uart_1
//   |__ i_uartcrosser
//
// DESCRIPTION: The apbSubSystem contains the APB bus master, bus controller and most of the APB peripherals, the interrupt controller, timers, and two UARTS.
//




// apbSubSystem hierarchy

//  apbSubSystem
//    |__i_apbbus8
//    |__i_apbmst
//    |__i_irqctrl
//    |__i_timers
//    |__i_uart
//    |__i_uart_1
//    |__i_uartcrosser

module apbSubSystem
    #( parameter
    addr_width = 32,        //ADDRESS BUS WIDTH
    bus_width = 32        //DATA BUS WIDTH
    )
    
    (
    
    input   clk,
    input   rst_an,
    // Interrupt;
    output  [3:0]Interrupt_IRL,
    input   [3:0]Interrupt_IRQVEC,
    input   Interrupt_INTack,
    // ex_ambaAHB;
    input   ex_ambaAHB_hsel,
    output  ex_ambaAHB_hready_resp,
    output  [31:0]ex_ambaAHB_hrdata,
    input   [3:0]ex_ambaAHB_hprot,
    input   [1:0]ex_ambaAHB_htrans,
    input   [2:0]ex_ambaAHB_hsize,
    input   ex_ambaAHB_hready,
    input   ex_ambaAHB_hwrite,
    input   [2:0]ex_ambaAHB_hburst,
    input   [31:0]ex_ambaAHB_haddr,
    output  [1:0]ex_ambaAHB_hresp,
    input   [31:0]ex_ambaAHB_hwdata,
    // i_apbbus_slv4;
    output  [31:0]i_apbbus_slv4_paddr,
    output  i_apbbus_slv4_psel,
    output  i_apbbus_slv4_pwrite,
    output  [31:0]i_apbbus_slv4_pwdata,
    output  i_apbbus_slv4_penable,
    input   [31:0]i_apbbus_slv4_prdata,
    // i_apbbus_slv5;
    output  [31:0]i_apbbus_slv5_paddr,
    output  i_apbbus_slv5_psel,
    output  i_apbbus_slv5_pwrite,
    output  [31:0]i_apbbus_slv5_pwdata,
    output  i_apbbus_slv5_penable,
    input   [31:0]i_apbbus_slv5_prdata,
    // i_apbbus_slv6;
    output  [31:0]i_apbbus_slv6_paddr,
    output  i_apbbus_slv6_psel,
    output  i_apbbus_slv6_pwrite,
    output  [31:0]i_apbbus_slv6_pwdata,
    output  i_apbbus_slv6_penable,
    input   [31:0]i_apbbus_slv6_prdata,
    // i_apbbus_slv7;
    output  [31:0]i_apbbus_slv7_paddr,
    output  i_apbbus_slv7_psel,
    output  i_apbbus_slv7_pwrite,
    output  [31:0]i_apbbus_slv7_pwdata,
    output  i_apbbus_slv7_penable,
    input   [31:0]i_apbbus_slv7_prdata
    );
    wire [31 : 0] i_apbmst_prdata ;
    wire [31 : 0] i_apbmst_pwdata ;
    wire i_apbmst_penable ;
    wire [31 : 0] i_apbmst_paddr ;
    wire i_apbmst_pwrite ;
    wire i_apbmst_psel ;
    wire i_apbbus8_psel_slv0 ;
    wire i_apbbus8_penable_slv0 ;
    wire [31 : 0] i_apbbus8_paddr_slv0 ;
    wire i_apbbus8_pwrite_slv0 ;
    wire [31 : 0] i_apbbus8_pwdata_slv0 ;
    wire [31 : 0] i_apbbus8_prdata_slv0 ;
    wire i_apbbus8_psel_slv1 ;
    wire i_apbbus8_penable_slv1 ;
    wire [31 : 0] i_apbbus8_paddr_slv1 ;
    wire i_apbbus8_pwrite_slv1 ;
    wire [31 : 0] i_apbbus8_pwdata_slv1 ;
    wire [31 : 0] i_apbbus8_prdata_slv1 ;
    wire i_apbbus8_psel_slv2 ;
    wire i_apbbus8_penable_slv2 ;
    wire [31 : 0] i_apbbus8_paddr_slv2 ;
    wire i_apbbus8_pwrite_slv2 ;
    wire [31 : 0] i_apbbus8_pwdata_slv2 ;
    wire [31 : 0] i_apbbus8_prdata_slv2 ;
    wire i_apbbus8_psel_slv3 ;
    wire i_apbbus8_penable_slv3 ;
    wire [31 : 0] i_apbbus8_paddr_slv3 ;
    wire i_apbbus8_pwrite_slv3 ;
    wire [31 : 0] i_apbbus8_pwdata_slv3 ;
    wire [31 : 0] i_apbbus8_prdata_slv3 ;
    wire i_timers_irq0 ;
    wire i_timers_irq1 ;
    wire i_uart_irq ;
    wire i_uart_1_irq ;
    wire i_uart_rxd ;
    wire i_uart_txd ;
    wire i_uart_ctsn ;
    wire i_uart_rtsn ;
    wire i_uart_rxen ;
    wire i_uart_1_rxd ;
    wire i_uart_1_txd ;
    wire i_uart_1_ctsn ;
    wire i_uart_1_rtsn ;
    wire i_uart_1_rxen ;
    wire [7 : 0] i_uart_1_scaler ;
    wire _ ;
    
    
    //INSTANTIATING APBBUS
    //
    
    apbbus # (
    .rangeSlv0 (4096),
    .rangeSlv1 (4096),
    .rangeSlv2 (4096),
    .rangeSlv3 (4096),
    .rangeSlv4 (4096),
    .rangeSlv5 (4096),
    .rangeSlv6 (4096),
    .rangeSlv7 (4096),
    .remapAddressSlv0 ('h0),
    .remapAddressSlv1 ('h1000),
    .remapAddressSlv2 ('h2000),
    .remapAddressSlv3 ('h3000),
    .remapAddressSlv4 ('h4000),
    .remapAddressSlv5 ('h5000),
    .remapAddressSlv6 ('h6000),
    .remapAddressSlv7 ('h7000)
    ) i_apbbus8(
    .psel_mst(i_apbmst_psel),
    .penable_mst(i_apbmst_penable),
    .paddr_mst(i_apbmst_paddr),
    .pwrite_mst(i_apbmst_pwrite),
    .pwdata_mst(i_apbmst_pwdata),
    .prdata_mst(i_apbmst_prdata),
    .psel_slv0(i_apbbus8_psel_slv0),
    .penable_slv0(i_apbbus8_penable_slv0),
    .paddr_slv0(i_apbbus8_paddr_slv0),
    .pwrite_slv0(i_apbbus8_pwrite_slv0),
    .pwdata_slv0(i_apbbus8_pwdata_slv0),
    .prdata_slv0(i_apbbus8_prdata_slv0),
    .psel_slv1(i_apbbus8_psel_slv1),
    .penable_slv1(i_apbbus8_penable_slv1),
    .paddr_slv1(i_apbbus8_paddr_slv1),
    .pwrite_slv1(i_apbbus8_pwrite_slv1),
    .pwdata_slv1(i_apbbus8_pwdata_slv1),
    .prdata_slv1(i_apbbus8_prdata_slv1),
    .psel_slv2(i_apbbus8_psel_slv2),
    .penable_slv2(i_apbbus8_penable_slv2),
    .paddr_slv2(i_apbbus8_paddr_slv2),
    .pwrite_slv2(i_apbbus8_pwrite_slv2),
    .pwdata_slv2(i_apbbus8_pwdata_slv2),
    .prdata_slv2(i_apbbus8_prdata_slv2),
    .psel_slv3(i_apbbus8_psel_slv3),
    .penable_slv3(i_apbbus8_penable_slv3),
    .paddr_slv3(i_apbbus8_paddr_slv3),
    .pwrite_slv3(i_apbbus8_pwrite_slv3),
    .pwdata_slv3(i_apbbus8_pwdata_slv3),
    .prdata_slv3(i_apbbus8_prdata_slv3),
    .psel_slv4(i_apbbus_slv4_psel),
    .penable_slv4(i_apbbus_slv4_penable),
    .paddr_slv4(i_apbbus_slv4_paddr),
    .pwrite_slv4(i_apbbus_slv4_pwrite),
    .pwdata_slv4(i_apbbus_slv4_pwdata),
    .prdata_slv4(i_apbbus_slv4_prdata),
    .psel_slv5(i_apbbus_slv5_psel),
    .penable_slv5(i_apbbus_slv5_penable),
    .paddr_slv5(i_apbbus_slv5_paddr),
    .pwrite_slv5(i_apbbus_slv5_pwrite),
    .pwdata_slv5(i_apbbus_slv5_pwdata),
    .prdata_slv5(i_apbbus_slv5_prdata),
    .psel_slv6(i_apbbus_slv6_psel),
    .penable_slv6(i_apbbus_slv6_penable),
    .paddr_slv6(i_apbbus_slv6_paddr),
    .pwrite_slv6(i_apbbus_slv6_pwrite),
    .pwdata_slv6(i_apbbus_slv6_pwdata),
    .prdata_slv6(i_apbbus_slv6_prdata),
    .psel_slv7(i_apbbus_slv7_psel),
    .penable_slv7(i_apbbus_slv7_penable),
    .paddr_slv7(i_apbbus_slv7_paddr),
    .pwrite_slv7(i_apbbus_slv7_pwrite),
    .pwdata_slv7(i_apbbus_slv7_pwdata),
    .prdata_slv7(i_apbbus_slv7_prdata)
    );
    
    //INSTANTIATING APBMST
    //
    
    apbmst # (
    .masterRange (1000000)
    ) i_apbmst(
    .clk('b0),
    .rst('b0),
    .hsize(ex_ambaAHB_hsize),
    .haddr(ex_ambaAHB_haddr),
    .htrans(ex_ambaAHB_htrans),
    .hwrite(ex_ambaAHB_hwrite),
    .hwdata(ex_ambaAHB_hwdata),
    .hreadyin(ex_ambaAHB_hready),
    .hsel(ex_ambaAHB_hsel),
    .hrdata(ex_ambaAHB_hrdata),
    .hreadyout(ex_ambaAHB_hready_resp),
    .hresp(ex_ambaAHB_hresp),
    .hprot(ex_ambaAHB_hprot),
    .hburst(ex_ambaAHB_hburst),
    .prdata(i_apbmst_prdata),
    .pwdata(i_apbmst_pwdata),
    .penable(i_apbmst_penable),
    .paddr(i_apbmst_paddr),
    .pwrite(i_apbmst_pwrite),
    .psel(i_apbmst_psel)
    );
    
    //INSTANTIATING IRQCTRL
    //
    
    irqctrl  i_irqctrl(
    .clk('b0),
    .rst('b0),
    .psel(i_apbbus8_psel_slv0),
    .penable(i_apbbus8_penable_slv0),
    .paddr(i_apbbus8_paddr_slv0),
    .pwrite(i_apbbus8_pwrite_slv0),
    .pwdata(i_apbbus8_pwdata_slv0),
    .prdata(i_apbbus8_prdata_slv0),
    .irq( { -9'b, i_uart_1_irq, i_timers_irq1, i_timers_irq0, i_uart_irq}),
    .intack(Interrupt_INTack),
    .irlin(Interrupt_IRQVEC),
    .irlout(Interrupt_IRL)
    );
    
    //INSTANTIATING TIMERS
    //
    
    timers # (
    .TPRESC (22)
    ) i_timers(
    .clk('b0),
    .rst('b0),
    .psel(i_apbbus8_psel_slv1),
    .penable(i_apbbus8_penable_slv1),
    .paddr(i_apbbus8_paddr_slv1),
    .pwrite(i_apbbus8_pwrite_slv1),
    .pwdata(i_apbbus8_pwdata_slv1),
    .prdata(i_apbbus8_prdata_slv1),
    .irq0(i_timers_irq0),
    .irq1(i_timers_irq1),
    .tick('b0),
    .wdog('b0),
    .dsuact( 1'b1),
    .ntrace( 1'b1),
    .freezetime( 1'b0),
    .lresp( 1'b1),
    .dresp('b0),
    .dsuen( { 1'b1,  1'b1}),
    .dsubre( 1'b1)
    );
    
    //INSTANTIATING UART
    //
    
    uart # (
    .ClockPeriod (8),
    .ClockPulseDuration (4),
    .ClockPulseOffset (4),
    .ClockPulseValue (1),
    .EXTBAUD (0),
    .VirtualClockPeriod (8),
    .VirtualClockPulseDuration (4),
    .VirtualClockPulseOffset (4),
    .VirtualClockPulseValue (1)
    ) i_uart(
    .clk('b0),
    .rst('b0),
    .psel(i_apbbus8_psel_slv2),
    .penable(i_apbbus8_penable_slv2),
    .paddr(i_apbbus8_paddr_slv2),
    .pwrite(i_apbbus8_pwrite_slv2),
    .pwdata(i_apbbus8_pwdata_slv2),
    .prdata(i_apbbus8_prdata_slv2),
    .irq(i_uart_irq),
    .scaler(i_uart_1_scaler),
    .rxd(i_uart_rxd),
    .rxen(i_uart_rxen),
    .txd(i_uart_txd),
    .txen('b0),
    .flow('b0),
    .rtsn(i_uart_rtsn),
    .ctsn(i_uart_ctsn)
    );
    
    //INSTANTIATING UART
    //
    
    uart # (
    .ClockPeriod (8),
    .ClockPulseDuration (4),
    .ClockPulseOffset (4),
    .ClockPulseValue (1),
    .EXTBAUD (0),
    .id_OutputFileName (default.htm),
    .VirtualClockPeriod (8),
    .VirtualClockPulseDuration (4),
    .VirtualClockPulseOffset (4),
    .VirtualClockPulseValue (1)
    ) i_uart_1(
    .clk('b0),
    .rst('b0),
    .psel(i_apbbus8_psel_slv3),
    .penable(i_apbbus8_penable_slv3),
    .paddr(i_apbbus8_paddr_slv3),
    .pwrite(i_apbbus8_pwrite_slv3),
    .pwdata(i_apbbus8_pwdata_slv3),
    .prdata(i_apbbus8_prdata_slv3),
    .irq(i_uart_1_irq),
    .scaler( {i_uart_1_scaler, i_uart_1_scaler}),
    .rxd(i_uart_1_rxd),
    .rxen(i_uart_1_rxen),
    .txd(i_uart_1_txd),
    .txen('b0),
    .flow('b0),
    .rtsn(i_uart_1_rtsn),
    .ctsn(i_uart_1_ctsn)
    );
    
    //INSTANTIATING UARTCROSSER
    //
    
    uartcrosser # (
    .ScalerValue ('h1)
    ) i_uartcrosser(
    .rxd0(i_uart_rxd),
    .txd0(i_uart_txd),
    .ctsn0(i_uart_ctsn),
    .rtsn0(i_uart_rtsn),
    .rxen0(i_uart_rxen),
    .rxd1(i_uart_1_rxd),
    .txd1(i_uart_1_txd),
    .ctsn1(i_uart_1_ctsn),
    .rtsn1(i_uart_1_rtsn),
    .rxen1(i_uart_1_rxen),
    .scaler(i_uart_1_scaler)
    );
    
    
    
    
endmodule

